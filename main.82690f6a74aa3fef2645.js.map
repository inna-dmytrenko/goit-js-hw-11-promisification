{"version":3,"sources":["webpack:///./js/task01.js","webpack:///./js/task02.js","webpack:///./js/task03.js"],"names":["delay","ms","Promise","resolve","setTimeout","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","map","user","updatedUsers","table","makeTransaction","transaction","reject","min","max","Math","floor","random","id","logSuccess","logError","warn","amount","catch"],"mappings":"0HAeMA,EAAQ,SAAAC,GACV,OAAO,IAAIC,SAAQ,SAAAC,GACfC,YAAW,WACPD,EAAQF,KACTA,OAILI,EAAS,SAAAC,GAAI,OAAIC,QAAQC,IAAR,kBAA8BF,EAA9B,OAGvBN,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,MAAMS,KAAKJ,G,kCCDXK,EAAQ,CACV,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAUrBC,EAAkB,SAACC,EAAUC,GAC/B,OAAO,IAAIb,SAAQ,SAACC,GAChBA,EAAQW,EAASE,KAAI,SAAAC,GAAI,OAAIA,EAAKN,OAASI,EAAd,iBACtBE,EADsB,CAChBL,QAASK,EAAKL,SAAWK,UAMxCZ,EAAS,SAAAa,GAAY,OAAIX,QAAQY,MAAMD,IAO7CL,EAAgBH,EAAO,SAASD,KAAKJ,GACrCQ,EAAgBH,EAAO,OAAOD,KAAKJ,GCpDnC,IAIMe,EAAkB,SAACC,GACrB,OAAO,IAAInB,SAAQ,SAACC,EAASmB,GACzB,IAN2BC,EAAKC,EAM1BxB,GANqBuB,EAMa,IANRC,EAMa,IAL1CC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IAMhDnB,YAAW,WACYqB,KAAKE,SAAW,GAE/BxB,EAAQ,CACdyB,GAAIP,EAAYO,GAChBtB,KAAMN,IAGAsB,EAAOD,EAAYO,MAGxB5B,OAGL6B,EAAa,SAAC,GAAe,IAAdD,EAAc,EAAdA,GAAItB,EAAU,EAAVA,KACzBC,QAAQC,IAAR,eAA2BoB,EAA3B,iBAA8CtB,EAA9C,OAEMwB,EAAW,SAAAF,GACjBrB,QAAQwB,KAAR,gCAA6CH,EAA7C,8BAUAR,EAAgB,CAAEQ,GAAI,GAAII,OAAQ,MAASvB,KAAKoB,GAAaI,MAAMH,GAEnEV,EAAgB,CAAEQ,GAAI,GAAII,OAAQ,MAAQvB,KAAKoB,GAAaI,MAAMH,GAElEV,EAAgB,CAAEQ,GAAI,GAAII,OAAQ,KAAOvB,KAAKoB,GAAaI,MAAMH,GAEjEV,EAAgB,CAAEQ,GAAI,GAAII,OAAQ,MAAQvB,KAAKoB,GAAaI,MAAMH,K","file":"main.82690f6a74aa3fef2645.js","sourcesContent":["// Задание 1 Напиши функцию delay(ms), которая возвращает промис, переходящий в\r\n// состояние \"resolved\" через ms миллисекунд. Значением исполнившегося промиса\r\n// должно быть то кол-во миллисекунд которое передали во время вызова функции\r\n// delay.\r\n\r\n// import { resolve } from \"core-js/fn/promise\";\r\n\r\n// const delay = ms => { // Твой код };\r\n\r\n// const logger = time => console.log(`Resolved after ${time}ms`);\r\n\r\n// // Вызовы функции для проверки delay(2000).then(logger); // Resolved after\r\n// 2000ms delay(1000).then(logger); // Resolved after 1000ms\r\n// delay(1500).then(logger); // Resolved after 1500ms\r\n\r\nconst delay = ms => {\r\n    return new Promise(resolve => {\r\n        setTimeout(() => {\r\n            resolve(ms)\r\n        }, ms);\r\n    });\r\n};\r\n\r\nconst logger = time => console.log(`Resolved after ${time}ms`);\r\n\r\n    // Вызовы функции для проверки \r\ndelay(2000).then(logger); // Resolved after2000ms\r\ndelay(1000).then(logger); // Resolved after 1000ms\r\ndelay(1500).then(logger); // Resolved after 1500ms","// Задание 2 Перепиши функцию\r\n// toggleUserState() так, чтобы она не использовала callback-функцию callback, а\r\n// принимала всего два параметра allUsers и userName и возвращала промис.\r\n\r\n// import { resolve } from \"core-js/fn/promise\";\r\n\r\n// const users = [ { name: 'Mango', active: true }, { name: 'Poly', active: false\r\n// }, { name: 'Ajax', active: true }, { name: 'Lux', active: false }, ];\r\n\r\n// const toggleUserState = (allUsers, userName, callback) => { const updatedUsers =\r\n// allUsers.map(user => user.name === userName ? { ...user, active: !user.active }\r\n// : user, );\r\n\r\n// callback(updatedUsers); };\r\n\r\n// const logger = updatedUsers => console.table(updatedUsers);\r\n\r\n// /\\*\r\n\r\n// - Сейчас работает так \\*/ toggleUserState(users, 'Mango', logger);\r\n//   toggleUserState(users, 'Lux', logger);\r\n\r\n// /\\*\r\n\r\n// - Должно работать так \\*/ toggleUserState(users, 'Mango').then(logger);\r\n//   toggleUserState(users, 'Lux').then(logger);\r\n\r\nconst users = [\r\n    { name: 'Mango', active: true },\r\n    { name: 'Poly', active: false },\r\n    { name: 'Ajax', active: true },\r\n    { name: 'Lux', active: false },\r\n];\r\n\r\n\r\n\r\n// const toggleUserState = (allUsers, userName, callback) => {\r\n//     const updatedUsers = allUsers.map(user => user.name === userName\r\n// ? { ...user, active: !user.active } : user);\r\n//     callback(updatedUsers);\r\n// };\r\nconst toggleUserState = (allUsers, userName) => {\r\n    return new Promise((resolve) => {\r\n        resolve(allUsers.map(user => user.name === userName\r\n        ? { ...user, active: !user.active } : user),\r\n        )\r\n    \r\n    })  \r\n};\r\n\r\nconst logger = updatedUsers => console.table(updatedUsers);\r\n\r\n// toggleUserState(users, 'Mango', logger);\r\n// toggleUserState(users, 'Lux', logger);\r\n\r\n\r\n\r\ntoggleUserState(users, 'Mango').then(logger);\r\ntoggleUserState(users, 'Lux').then(logger);","// Задание 3 Перепиши функцию\r\n//   makeTransaction() так, чтобы она не использовала callback-функции onSuccess и\r\n//   onError, а принимала всего один параметр transaction и возвращала промис.\r\n\r\n// import { resolve } from \"core-js/fn/promise\";\r\n\r\nconst randomIntegerFromInterval = (min, max) => {\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n};\r\n\r\nconst makeTransaction = (transaction) => {\r\n    return new Promise((resolve, reject) => {\r\n        const delay = randomIntegerFromInterval(200, 500);\r\n        setTimeout(() => {\r\n            const canProcess = Math.random() > 0.3;\r\n            if (canProcess) {\r\n                resolve({\r\n          id: transaction.id,\r\n          time: delay\r\n        });\r\n            } else {\r\n                reject(transaction.id);\r\n            }\r\n\r\n        }, delay);\r\n    });\r\n};\r\nconst logSuccess = ({id, time}) => {\r\nconsole.log(`Transaction ${id} processed in ${time}ms`); };\r\n\r\nconst logError = id => {\r\nconsole.warn(`Error processing transaction ${id}. Please try again later.`); };\r\n\r\n\r\n\r\n    // - Работает так _ /\r\n// makeTransaction({ id: 70, amount: 150 }, logSuccess, logError);\r\n// makeTransaction({ id: 71, amount: 230 }, logSuccess, logError);\r\n// makeTransaction({ id: 72, amount: 75 }, logSuccess, logError);\r\n// makeTransaction({ id: 73, amount: 100 }, logSuccess, logError); \r\n// - Должно работать так \\* / \r\nmakeTransaction({ id: 70, amount: 150 })  .then(logSuccess) .catch(logError);\r\n\r\nmakeTransaction({ id: 71, amount: 230 }) .then(logSuccess) .catch(logError);\r\n\r\nmakeTransaction({ id: 72, amount: 75 }) .then(logSuccess) .catch(logError);\r\n\r\nmakeTransaction({ id: 73, amount: 100 }) .then(logSuccess) .catch(logError);"],"sourceRoot":""}